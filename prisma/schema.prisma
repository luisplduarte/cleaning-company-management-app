generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ADMIN)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id       String          @id @default(cuid())
  name     String
  country  String
  email    String
  phone    String
  town     String
  zipCode  String
  payments ClientPayment[]
  jobs     Job[]
}

model Job {
  id             String          @id @default(cuid())
  title          String
  description    String
  location       String
  type           JobType
  status         JobStatus       @default(PENDING)
  start_date     DateTime
  end_date       DateTime
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  clientId       String
  assignments    Assignment[]
  clientPayments ClientPayment[]
  client         Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  workerPayments WorkerPayment[]
}

model Worker {
  id           String              @id @default(cuid())
  name         String
  email        String
  phone        String
  country      String
  town         String
  zipCode      String
  hourly_rate  Decimal             @default(0) @db.Decimal(10, 2)
  assignments  Assignment[]
  payments     WorkerPayment[]
  rate_history WorkerRateHistory[]
}

model Assignment {
  id       String @id @default(cuid())
  jobId    String
  workerId String
  job      Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  worker   Worker @relation(fields: [workerId], references: [id], onDelete: Cascade)
}

model WorkerRateHistory {
  id         String   @id @default(cuid())
  worker_id  String
  old_rate   Decimal  @db.Decimal(10, 2)
  new_rate   Decimal  @db.Decimal(10, 2)
  changed_at DateTime @default(now())
  worker     Worker   @relation(fields: [worker_id], references: [id], onDelete: Cascade)
}

model Rate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  value       Decimal  @db.Decimal(10, 2)
  is_system   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model WorkerPayment {
  id         String        @id @default(cuid())
  worker_id  String
  job_id     String
  amount     Decimal       @db.Decimal(10, 2)
  status     PaymentStatus @default(WAITING_PAYMENT)
  payment_date DateTime?
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  job        Job           @relation(fields: [job_id], references: [id], onDelete: Cascade)
  worker     Worker        @relation(fields: [worker_id], references: [id], onDelete: Cascade)
}

model ClientPayment {
  id           String        @id @default(cuid())
  client_id    String
  job_id       String
  amount       Decimal       @db.Decimal(10, 2)
  status       PaymentStatus @default(WAITING_PAYMENT)
  payment_date DateTime?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  client       Client        @relation(fields: [client_id], references: [id], onDelete: Cascade)
  job          Job           @relation(fields: [job_id], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
}

enum JobType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  WAITING_PAYMENT
  ISSUED
  COMPLETED
}
